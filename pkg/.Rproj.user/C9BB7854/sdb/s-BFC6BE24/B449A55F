{
    "contents" : "#' Allows to download and read dbf-files with different forms of accounting reports (101, 102, 123, 134, 135) for a certain time period, as well as find information about the banks on Central Bank of Russia site.\n#'\n#' The goal of this project is to make available to users all over the world the unique data of the accounting statements of Russian banks, which is collected by the Central Bank of Russian Federation. Data is represented as archived dbf files (database files). The package provides the opportunity to download these archives from the Central Bank's website, read them and load into R. You can download any of the five forms of the accounting reports (101, 102, 123, 134, 135) for any given time period or over the entire available. You can also get detailed information on any Bank, knowing his registration number to find out the name, address, is it registered it in the Deposit Insurance Agency, is it went bankrupt or not.\n#'\n#' @docType package\n#' @name cbrAPI\n#' @importFrom plyr rbind.fill\n#' @importFrom foreign read.dbf\n#' @importFrom XML readHTMLTable\n#' @export download.dbf download.dbf.all getBankInfo\nNULL\n\n# get number of days in a month\nnumberOfDays <- function(date) {\n  m <- format(date, format=\"%m\")\n  while (format(date, format=\"%m\") == m) {\n    date <- date + 1\n  }\n  return(as.integer(format(date - 1, format=\"%d\")))\n}\n\n# inarchive rar files\nunrar <- function(filename, exdir) {\n  #extract and delete rar — we can use OS command line to open it with default app\n  #for Windows\n  if(Sys.info()[1] == \"Windows\") {\n    # need installr package\n    if(length(grep('installr', rownames(installed.packages()))) < 1) {\n      install.packages('installr')\n    }\n    require(installr)\n    # install unrar once, create file not to do it again\n    if(file.exists('unrar.txt') == FALSE) {\n      install.URL('http://www.rarlab.com/rar/unrarw32.exe')\n      file.create('unrar.txt')\n      cat(\"Do not delete me!\", file=\"unrar.txt\", append=TRUE)\n    }\n    dir.create(substr(exdir, 1, 16), showWarnings = FALSE)\n    #exdir <- paste(getwd(), '/dbf/101-20100101', sep = '')\n    cmd <- paste('unrar e', shQuote(filename), '-y -o', shQuote(exdir))\n    system(cmd, ignore.stderr = TRUE, ignore.stdout = TRUE)\n  }\n  #for OS X\n  if(Sys.info()[1] == \"Darwin\") {\n    # system(paste(\"open\", exdir))\n    system('ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"', ignore.stderr = TRUE)\n    # system('brew update', ignore.stdout = TRUE)\n    system('brew install unrar', ignore.stderr = TRUE)\n    dir.create(substr(exdir, 1, 16), showWarnings = FALSE)\n    system(paste('unrar e', filename, exdir), ignore.stdout = TRUE)\n  }\n  #for Unix\n  if(Sys.info()[1] == \"Unix\") {\n    warning('Make sure that you have firstly installed 7zip with ', shQuote('sudo apt-get install p7zip-rar'))\n    #     system('sudo apt-get install p7zip-rar')\n    system(paste(\"7z x \", as.character(path)))\n  }\n  #if(.Platform$OS.type == 'unix')\n}\n\n#' @title Download financial statements of Russian banks\n#' @description This function allows you to download and read dbf-files, which contain all available accounting reports and financial statements from site of Central Bank of Russia (www.cbr.ru)\n#' @param startdate Start date, contains from when to start downloading data. Format \\code{'yyyy-mm'}.\n#' @param enddate End date, contains from when to finish downloading data. Format \\code{'yyyy-mm'}. Defaults to \\code{startdate}.\n#' @param form Report form, contains what type of form to download. Can be \\code{101}, \\code{102}, \\code{123}, \\code{134} and \\code{135}. Defaults to \\code{101}.\n#' @param tofactor Convert resulted data frame to factor or not? Defaults to \\code{FALSE}.\n#' @param savefiles Save downloaded dbf-files or not? Defaults to \\code{FALSE}.\n#' @return Returns data frame with row-binded content of dbf-files\n#' @seealso \\code{\\link{download.file}} for simple downloading, \\code{\\link{read.dbf}} for reading dbf-files\n#' @examples\n#' data101 <- download.dbf(\"2006-07\")\n#' data123 <- download.dbf(\"2014-07\", \"2015-01\", form=123)\n#' data134 <- download.dbf(\"2010-07\", \"2011-01\", form=134, savefiles=TRUE)\n#' data135 <- download.dbf(\"2010-07\", form=135)\n#' @keywords dbf cbr download read accounting reports russia banks\ndownload.dbf <- function(startdate, enddate=startdate, form=101, tofactor=FALSE, savefiles=FALSE) {\n  path = 'dbf'\n  unlink(path, recursive = TRUE)\n  dir.create(path, showWarnings = FALSE)\n  \n  startdate <- paste(startdate, \"-01\", sep=\"\")\n  startdate <- as.Date(startdate, \"%Y-%m-%d\")\n  enddate <- paste(enddate, \"-01\", sep=\"\")\n  enddate <- as.Date(enddate, \"%Y-%m-%d\")\n  \n  lastdate <- Sys.Date() - as.numeric(substr(Sys.Date(), 9, 10))\n  lastdate <- lastdate - numberOfDays(lastdate) + 1\n  if(enddate > lastdate) {\n    stop('No data for that date. Check enddate arg.')\n  }\n  \n  # from 01.02.2004, monthly\n  if(form == 101) {\n    if(startdate >= as.Date(\"2004-02-01\", \"%Y-%m-%d\")) {\n      date <- startdate\n      while(date <= enddate) {\n        folder <- paste(substr(date, 1, 4), substr(date, 6, 7), substr(date, 9, 10), sep=\"\")\n        if(date < \"2009-01-01\") {\n          #2004 — 2008 zip\n          filetype <- '.zip'\n          url <- paste(\"http://www.cbr.ru/credit/forms/101-\", folder, filetype, sep=\"\")\n          filename <- paste(path, \"/101-\", folder, filetype, sep=\"\")\n          download.file(url, filename, mode = 'wb')\n          unzip(filename, exdir=paste(path, \"/101-\", folder, sep=\"\"))\n        } else {\n          #2009 — 2014 rar\n          filetype <- '.rar'\n          url <- paste(\"http://www.cbr.ru/credit/forms/101-\", folder, filetype, sep=\"\")\n          filename <- paste(path, \"/101-\", folder, filetype, sep=\"\")\n          download.file(url, filename, mode = 'wb')\n          unrar(filename, exdir=paste(path, \"/101-\", folder, sep=\"\"))\n        }\n        date <- date+numberOfDays(date)\n      }\n    }\n    else {\n      stop(\"Start date must be later than 2004.02.01\")\n    }\n    # read dbf\n    # start from 2-nd, 1-st is root dir\n    data <- NULL\n    for(i in 2:length(list.dirs(path))) {\n      # take mmyyyyB1.DBF, if not exists, take mmyyyy_B.DBF\n      index <- grep(\"B1\", list.files(list.dirs(path)[i]))\n      if(length(index) < 1) {\n        index <- grep(\"_B\", list.files(list.dirs(path)[i]))\n      }\n      data <- rbind.fill(data,\n                         read.dbf(paste(list.dirs(path)[i], \"/\",\n                                        list.files(list.dirs(path)[i])[index], sep=\"\"), as.is = FALSE))\n      message(i-1, \" from \", length(list.dirs(path))-1, \" done.\")\n    }\n  }\n  # from 01.01.2004, quarterly\n  if(form == 102) {\n    if(startdate >= as.Date(\"2004-01-01\", \"%Y-%m-%d\")) {\n      date <- startdate\n      if(as.numeric(substr(date, 6,7)) %in% c(1,4,7,10)) {\n        while(date <= enddate) {\n          folder <- paste(substr(date, 1, 4), substr(date, 6, 7), substr(date, 9, 10), sep=\"\")\n          if(date < \"2009-01-01\") {\n            #2004 — 2008 zip\n            filetype <- '.zip'\n            url <- paste(\"http://www.cbr.ru/credit/forms/102-\", folder, filetype, sep=\"\")\n            filename <- paste(path, \"/102-\", folder, filetype, sep=\"\")\n            download.file(url, filename, mode = 'wb')\n            unzip(filename, exdir=paste(path, \"/102-\", folder, sep=\"\"))\n          } else {\n            #2009 — 2014 rar\n            filetype <- '.rar'\n            url <- paste(\"http://www.cbr.ru/credit/forms/102-\", folder, filetype, sep=\"\")\n            filename <- paste(path, \"/102-\", folder, filetype, sep=\"\")\n            download.file(url, filename, mode = 'wb')\n            unrar(filename, exdir=paste(path, \"/102-\", folder, sep=\"\"))\n          }\n          # go to the next quarter\n          for(i in 1:3) { date <- date+numberOfDays(date) }\n        }\n      }\n      else {\n        stop(\"No dbf found on this date\")\n      }\n    }\n    else {\n      stop(\"Start date must be later than 2004.01.01\")\n    }\n    # read dbf\n    # start from 2-nd, 1-st is root dir\n    data <- NULL\n    date <- startdate\n    for(i in 2:length(list.dirs(path))) {\n      # take mmyyyyP1.DBF, if not exists, take mmyyyy_P.DBF\n      index <- grep(\"P1\", list.files(list.dirs(path)[i]))\n      if(length(index) < 1) {\n        index <- grep(\"_P\", list.files(list.dirs(path)[i]))\n      }\n      data <- rbind.fill(data,\n                         cbind(read.dbf(paste(list.dirs(path)[i], \"/\",\n                                              list.files(list.dirs(path)[i])[index], sep=\"\"), as.is = FALSE), date))\n      # go to the next quarter\n      for(j in 1:3) { date <- date+numberOfDays(date) }\n      message(i-1, \" from \", length(list.dirs(path))-1, \" done.\")\n    }\n    data <- data[ , c('REGN','CODE','date','ITOGO','SIM_R','SIM_V','SIM_ITOGO')]\n    colnames(data)[3] <- 'DT'\n  }\n  # from 01.02.2014, monthly\n  if(form == 123) {\n    if(startdate >= as.Date(\"2014-02-01\", \"%Y-%m-%d\")) {\n      date <- startdate\n      while(date <= enddate) {\n        folder <- paste(substr(date, 1, 4), substr(date, 6, 7), substr(date, 9, 10), sep=\"\")\n        filetype <- '.rar'\n        url <- paste(\"http://www.cbr.ru/credit/forms/123-\", folder, filetype, sep=\"\")\n        filename <- paste(path, \"/123-\", folder, filetype, sep=\"\")\n        download.file(url, filename, mode = 'wb')\n        unrar(filename, exdir=paste(path, \"/123-\", folder, sep=\"\"))\n        date <- date+numberOfDays(date)\n      }\n    }\n    else {\n      stop(\"Start date must be later than 2014.02.01\")\n    }\n    # read dbf\n    # start from 2-nd, 1-st is root dir\n    data <- NULL\n    for(i in 2:length(list.dirs(path))) {\n      # take mmyyyy_123D.DBF\n      index <- grep(\"_123D\", list.files(list.dirs(path)[i]))\n      data <- rbind.fill(data,\n                         read.dbf(paste(list.dirs(path)[i], \"/\",\n                                        list.files(list.dirs(path)[i])[index], sep=\"\"), as.is = FALSE))\n      message(i-1, \" from \", length(list.dirs(path))-1, \" done.\")\n    }\n  }\n  # from 01.06.2010, monthly\n  if(form == 134) {\n    if(startdate >= as.Date(\"2010-06-01\", \"%Y-%m-%d\")) {\n      date <- startdate\n      while(date <= enddate) {\n        folder <- paste(substr(date, 1, 4), substr(date, 6, 7), substr(date, 9, 10), sep=\"\")\n        filetype <- '.rar'\n        url <- paste(\"http://www.cbr.ru/credit/forms/134-\", folder, filetype, sep=\"\")\n        filename <- paste(path, \"/134-\", folder, filetype, sep=\"\")\n        download.file(url, filename, mode = 'wb')\n        unrar(filename, exdir=paste(path, \"/134-\", folder, sep=\"\"))\n        date <- date+numberOfDays(date)\n      }\n    }\n    else {\n      stop(\"Start date must be later than 2010.06.01\")\n    }\n    # read dbf\n    # start from 2-nd, 1-st is root dir\n    data <- NULL\n    for(i in 2:length(list.dirs(path))) {\n      # take mmyyyy_134D.DBF\n      index <- grep(\"_134D\", list.files(list.dirs(path)[i]))\n      data <- rbind.fill(data,\n                         read.dbf(paste(list.dirs(path)[i], \"/\",\n                                        list.files(list.dirs(path)[i])[index], sep=\"\"), as.is = FALSE))\n      message(i-1, \" from \", length(list.dirs(path))-1, \" done.\")\n    }\n  }\n  # from 01.06.2010, monthly\n  if(form == 135) {\n    if(startdate >= as.Date(\"2010-06-01\", \"%Y-%m-%d\")) {\n      date <- startdate\n      while(date <= enddate) {\n        folder <- paste(substr(date, 1, 4), substr(date, 6, 7), substr(date, 9, 10), sep=\"\")\n        filetype <- '.rar'\n        url <- paste(\"http://www.cbr.ru/credit/forms/135-\", folder, filetype, sep=\"\")\n        filename <- paste(path, \"/135-\", folder, filetype, sep=\"\")\n        download.file(url, filename, mode = 'wb')\n        unrar(filename, exdir=paste(path, \"/135-\", folder, sep=\"\"))\n        date <- date+numberOfDays(date)\n      }\n      # read dbf\n      # start from 2-nd, 1-st is root dir\n      data <- NULL\n      for(i in 2:length(list.dirs(path))) {\n        # take mmyyyy_135_3.DBF\n        index <- grep(\"_135_3\", list.files(list.dirs(path)[i]))\n        data <- rbind.fill(data,\n                           read.dbf(paste(list.dirs(path)[i], \"/\",\n                                          list.files(list.dirs(path)[i])[index], sep=\"\"), as.is = FALSE))\n        message(i-1, \" from \", length(list.dirs(path))-1, \" done.\")\n      }\n    }\n    else {\n      stop(\"Start date must be later than 2010.06.01\")\n    }\n  }\n  if(form %in% c(101, 102, 123, 134, 135) == FALSE) {\n    stop('No such form on www.cbr.ru')\n  }\n  \n  if(tofactor == TRUE) {\n    message(\"\\nConverting to factor...\")\n    data <- data.frame(lapply(data, factor))\n  }\n  if(savefiles == FALSE) {\n    unlink(path, recursive = TRUE)\n  }\n  return(data)\n}\n\n#' @title Download financial statements of Russian banks\n#' @description This function allows you to download and read dbf-files FOR ALL AVAILABLE DATES, which contain all available accounting reports and financial statements from site of Central Bank of Russia (www.cbr.ru)\n#' @param form Report form, contains what type of form to download. Can be \\code{101}, \\code{102}, \\code{123}, \\code{134} and \\code{135}. Defaults to \\code{101}.\n#' @param tofactor Convert resulted data frame to factor or not? Defaults to \\code{FALSE}.\n#' @param savefiles Save downloaded dbf-files or not? Defaults to \\code{FALSE}.\n#' @return Returns data frame with row-binded content of dbf-files\n#' @seealso \\code{\\link{download.file}} for simple downloading, \\code{\\link{read.dbf}} for reading dbf-files\n#' @examples\n#' data123 <- download.dbf.all(form=123, tofactor=TRUE)\n#' data134 <- download.dbf.all(form=134)\n#' @keywords dbf cbr download read accounting reports russia banks\ndownload.dbf.all <- function(form=101, tofactor=FALSE, savefiles=FALSE) {\n  if(form == 101) {startdate <- '2004-02'}\n  if(form == 102) {startdate <- '2004-01'}\n  if(form == 123) {startdate <- '2014-02'}\n  if(form == 134) {startdate <- '2010-06'}\n  if(form == 135) {startdate <- '2010-06'}\n  enddate <- Sys.Date() - as.numeric(substr(Sys.Date(), 9, 10))\n  enddate <- enddate - numberOfDays(enddate) + 1\n  enddate <- substr(enddate, 1, 7)\n  data <- download.dbf(startdate, enddate, form=form, tofactor=tofactor, savefiles=savefiles)\n  return(data)\n}\n\n#' @title Get information about Russian banks\n#' @description This function allows you to parse information about Russian banks by registration number from site of Central Bank of Russia (www.cbr.ru).\n#' @param regnum Registration number of some bank. Can be integer or string.\n#' @return Returns data frame with information about bank.\\cr\\cr\n#' \\code{name} — Bank's name\\cr\n#' \\code{regnum} — Bank's registration number\\cr\n#' \\code{address} — Bank's address\\cr\n#' \\code{balance} — Presence of balance reports (monthly)\\cr\n#' \\code{profitandlosses} — Presence of profit and loss statement (quarterly)\\cr\n#' \\code{dia} — Is this bank registered in the Deposit Insurance Agency (DIA)?\\cr\n#' \\code{intheprocess} — Is this bank in the process of registration (no license yet)?\\cr\n#' \\code{withdrawed} — Is licence withdrawn?\\cr\n#' \\code{revoked} — Is licence revoked?\\cr\n#' \\code{eliminated} — Is licence eliminated?\n#' @seealso \\code{\\link{readHTMLTable}} for parsing html tables, \\code{\\link{download.dbf}} for downloading financial statements of Russian banks\n#' @examples\n#' info <- getBankInfo(2856)\n#' info <- getBankInfo(\"30\")$name\n#' @keywords dbf cbr download read accounting reports russia banks\ngetBankInfo <- function(regnum) {\n  info <- matrix(nrow=0,ncol=10)\n  url <- paste(\"http://www.cbr.ru/credit/colist.asp?find=\", regnum, \"&how=rnum\", sep=\"\")\n  table <- readHTMLTable(url)[[2]]\n  name <- as.character(table[1,4])\n  address <- as.character(table[1,5])\n  if(length(grep(\"Б\", as.character(table[1,2]))) > 0) { balance <- TRUE } else { balance <- FALSE }\n  if(length(grep(\"П\", as.character(table[1,2]))) > 0) { profitandlosses <- TRUE } else { profitandlosses <- FALSE }\n  if(length(grep(\"С\", as.character(table[1,2]))) > 0) { dia <- TRUE } else { dia <- FALSE }\n  if(length(grep(\"офр\", as.character(table[1,2]))) > 0) { intheprocess <- TRUE } else { intheprocess <- FALSE }\n  if(length(grep(\"отз\", as.character(table[1,2]))) > 0) { withdrawed <- TRUE } else { withdrawed <- FALSE }\n  if(length(grep(\"анн\", as.character(table[1,2]))) > 0) { revoked <- TRUE } else { revoked <- FALSE }\n  if(length(grep(\"лик\", as.character(table[1,2]))) > 0) { eliminated <- TRUE } else { eliminated <- FALSE }\n  info <- rbind(c(name, regnum, address, balance, profitandlosses, dia, intheprocess, withdrawed, revoked, eliminated))\n  colnames(info) <- c('name', 'regnum', 'address', 'balance', 'profitandlosses', 'dia', 'intheprocess', 'withdrawed', 'revoked', 'eliminated')\n  info <- as.data.frame(info)\n  return(info)\n}",
    "created" : 1431712028251.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "13|32|19|0|\n22|36|58|0|\n92|19|132|2|\n134|19|185|2|\n187|19|214|2|\n216|19|243|2|\n245|19|272|2|\n298|73|309|0|\n",
    "hash" : "3110567248",
    "id" : "B449A55F",
    "lastKnownWriteTime" : 1431733292,
    "path" : "~/Documents/R packages/cbrAPI/R/cbrAPI.R",
    "project_path" : "R/cbrAPI.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}